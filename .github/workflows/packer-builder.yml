name: Packer Build

env:
    PORT:  ${{ secrets.PORT}}
    TEST_DB_NAME: ${{ secrets.TEST_DB_NAME }}
    TEST_DB_USERNAME : ${{ secrets.TEST_DB_USERNAME }}
    TEST_DB_PASSWORD : ${{ secrets.TEST_DB_PASSWORD }}
    host : ${{ secrets.HOST }}
    dialect: ${{ secrets.DIALECT }}

on:
  push:
    branches:
      main

jobs:
  test2:
    name: Run Tests
    runs-on: ubuntu-latest
    outputs:
      ami_id: ${{ steps.store.outputs.ami }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.14.0'
        
      - name: Set up Postgres
        run: |
            sudo apt update
            sudo apt-get install -y postgresql postgresql-contrib
            sudo systemctl start postgresql
            sudo systemctl enable postgresql
            POSTGRES_PASSWORD=${{ secrets.TEST_DB_PASSWORD }}
            sudo -u postgres psql -c "ALTER USER postgres WITH PASSWORD '$POSTGRES_PASSWORD';"
            sudo -u postgres createdb ${{ secrets.TEST_DB_NAME }}
            
      - name: Zip webapp 
        run: |
          zip -r webapp.zip ./
          ls 

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: "${{ vars.AWS_REGION }}"

      - name: Setup packer
        uses: hashicorp/setup-packer@main
        with:
            version: "latest"

      - name: Configure Packer Environment Variables
        run: |
          set -x  
          echo > aws.pkvars.hcl
          echo aws_region=\"${{ vars.AWS_REGION }}\" >> aws.pkvars.hcl
          echo instance_type=\"${{ vars.INSTANCE_TYPE }}\" >> aws.pkvars.hcl
          echo ssh_username=\"${{ vars.SSH_USERNAME }}\" >> aws.pkvars.hcl
          echo source_ami=\"${{ vars.SOURCE_AMI }}\" >> aws.pkvars.hcl
          echo subnet_id=\"${{ vars.SUBNET_ID }}\" >> aws.pkvars.hcl
            
      - name: Initialize Packer
        run: "packer init ./aws.pkr.hcl"

      - name: Packer Validate
        run: "packer validate --var-file=aws.pkvars.hcl ./aws.pkr.hcl"

      - name: Packer build
        run: "packer build --var-file=aws.pkvars.hcl ./aws.pkr.hcl"

      - name: Store AMI ID
        id: store 
        run: | 
          echo "Fetching AMI ID"
          AMI_ID=$(jq -r '.builds[-1].artifact_id' manifest.json | cut -d ":" -f2)
          echo "$AMI_ID"
          echo "ami=$AMI_ID" >> "$GITHUB_OUTPUT"

  instance_refresh_dev:
    needs: test2
    name: Dev Instance Refresh for AutoScaling
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Fetch Launch Template ID
        run: |
          LAUNCH_TEMPLATE_ID=$(aws ec2 describe-launch-templates --query 'LaunchTemplates[0].LaunchTemplateId' --output text)
          echo "launch_template_id=$LAUNCH_TEMPLATE_ID" >> "$GITHUB_ENV"
      
      - name: Create New Launch Template Version
        run: |
          aws ec2 create-launch-template-version --launch-template-id $launch_template_id --source-version 1 --launch-template-data '{"ImageId":"${{needs.test2.outputs.ami_id}}"}' --version-description "New Version"
      
      - name: Fetch Auto Scaling Group Name
        run: |
          AUTO_SCALING_GROUP_NAME=$(aws autoscaling describe-auto-scaling-groups --query 'AutoScalingGroups[0].AutoScalingGroupName' --output text)
          echo "auto_scaling_group_name=$AUTO_SCALING_GROUP_NAME" >> "$GITHUB_ENV"
      
      - name: Refresh instances
        run: |
          aws autoscaling start-instance-refresh --auto-scaling-group-name $auto_scaling_group_name

      - name: Check instance refresh progress
        run: |
          ASG_REFRESH_STATUS="Pending"

          while [ "$ASG_REFRESH_STATUS" != "Successful" ] && [ "$ASG_REFRESH_STATUS" != "Failed" ] && [ "$ASG_REFRESH_STATUS" != "Cancelled" ]; do
            ASG_REFRESH_STATUS=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name $auto_scaling_group_name --query 'InstanceRefreshes[0].Status' --output text)
      
            # Print the current status
            echo "Instance Refresh Status: $ASG_REFRESH_STATUS"
      
            # Add a sleep to avoid making too many API calls in a short time
            sleep 30
          done
          # Print the reason for exit
          if [ "$ASG_REFRESH_STATUS" == "Successful" ]; then
            echo "Instance refresh completed successfully."
          elif [ "$ASG_REFRESH_STATUS" == "Failed" ]; then
            echo "Instance refresh failed."
          elif [ "$ASG_REFRESH_STATUS" == "Cancelled" ]; then
            echo "Instance refresh was cancelled."
          else
            echo "Unexpected exit status: $ASG_REFRESH_STATUS"
          fi

  instance_refresh_demo:
    needs: test2
    name: Demo Instance Refresh for AutoScaling
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEMO }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Fetch Launch Template ID
        run: |
          LAUNCH_TEMPLATE_ID=$(aws ec2 describe-launch-templates --query 'LaunchTemplates[0].LaunchTemplateId' --output text)
          echo "launch_template_id=$LAUNCH_TEMPLATE_ID" >> "$GITHUB_ENV"
      
      - name: Create New Launch Template Version
        run: |
          aws ec2 create-launch-template-version --launch-template-id $launch_template_id --source-version 1 --launch-template-data '{"ImageId":"${{needs.test2.outputs.ami_id}}"}' --version-description "New Version"
      
      - name: Fetch Auto Scaling Group Name
        run: |
          AUTO_SCALING_GROUP_NAME=$(aws autoscaling describe-auto-scaling-groups --query 'AutoScalingGroups[0].AutoScalingGroupName' --output text)
          echo "auto_scaling_group_name=$AUTO_SCALING_GROUP_NAME" >> "$GITHUB_ENV"
      
      - name: Refresh instances
        run: |
          aws autoscaling start-instance-refresh --auto-scaling-group-name $auto_scaling_group_name

      - name: Check instance refresh progress
        run: |
          ASG_REFRESH_STATUS="Pending"

          while [ "$ASG_REFRESH_STATUS" != "Successful" ] && [ "$ASG_REFRESH_STATUS" != "Failed" ] && [ "$ASG_REFRESH_STATUS" != "Cancelled" ]; do
            ASG_REFRESH_STATUS=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name $auto_scaling_group_name --query 'InstanceRefreshes[0].Status' --output text)
      
            # Print the current status
            echo "Instance Refresh Status: $ASG_REFRESH_STATUS"
      
            # Add a sleep to avoid making too many API calls in a short time
            sleep 30
          done
          # Print the reason for exit
          if [ "$ASG_REFRESH_STATUS" == "Successful" ]; then
            echo "Instance refresh completed successfully."
          elif [ "$ASG_REFRESH_STATUS" == "Failed" ]; then
            echo "Instance refresh failed."
          elif [ "$ASG_REFRESH_STATUS" == "Cancelled" ]; then
            echo "Instance refresh was cancelled."
          else
            echo "Unexpected exit status: $ASG_REFRESH_STATUS"
          fi

